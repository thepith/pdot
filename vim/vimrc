set encoding=utf-8
scriptencoding utf-8
" clear previous variable settings

if empty(glob('$HOME/.vim/autoload/plug.vim'))
    " Download the actual plugin manager
    silent execute '!mkdir -p $HOME/.vim/autoload/'
    silent execute '!wget -P $HOME/.vim/autoload https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
endif

if !has('compatible')
   call plug#begin('$HOME/.vim/plugged')
   " Appearance
   Plug 'altercation/vim-colors-solarized'

   "usability
   Plug 'christoomey/vim-tmux-navigator'
   if v:version >= 800
      Plug 'tmux-plugins/vim-tmux-focus-events'
   endif
   Plug 'tpope/vim-fugitive'
   Plug 'tpope/vim-unimpaired'
   Plug 'tpope/vim-dispatch'
   Plug 'tpope/vim-surround'
   Plug 'tpope/vim-repeat'
   Plug 'tpope/vim-commentary'
   Plug 'vim-voom/VOoM', {'for': ['tex', 'vimwiki'] }
   Plug 'gcmt/taboo.vim'
   Plug 'junegunn/vim-peekaboo'
   Plug 'rhysd/vim-grammarous'

   "Languages
   Plug 'vim-scripts/gnuplot.vim', {'for': ['gnuplot']}
   Plug 'vim-scripts/indentpython.vim', {'for': ['python']}

   Plug 'joereynolds/vim-minisnip'
   if v:version >= 800
      Plug 'w0rp/ale', {'on': ['ALELint', 'ALEInfo', 'ALEToggle']}
   else
      Plug 'scrooloose/syntastic', {'on': ['SyntasticCheck', 'SyntasticInfo']}
   endif
   Plug 'junegunn/vim-easy-align'

   " vim Wiki
   Plug 'vimwiki/vimwiki', {'branch': 'dev'}
   Plug 'tpope/vim-speeddating', {'for': ['org', 'vimwiki', 'markdown']}

   " Markdown
   Plug 'plasticboy/vim-markdown', {'for': ['markdown']}

   "Undo
   Plug 'mbbill/undotree' ", {'on': ['UndotreeToggle']}

   call plug#end()
endif

set omnifunc=syntaxcomplete#Complete
let g:mapleader="\<Space>"

if has('win32unix')
   let g:netrw_browsex_viewer='cygstart'
elseif has('win32')
   let g:netrw_browsex_viewer='cmd /c start'
elseif has('unix')
   let g:netrw_browsex_viewer='xdg-open'
endif

if &term =~? '^screen'
    " tmux will send xterm-style keys when its xterm-keys option is on
    execute "set <xUp>=\e[1;*A"
    execute "set <xDown>=\e[1;*B"
    execute "set <xRight>=\e[1;*C"
    execute "set <xLeft>=\e[1;*D"
endif

" Plugins
" solarized
set background=light
let g:solarized_visibility='high'
let g:solenv=$SOLVAR
if g:solenv ==? 'light'
   set background=light
elseif g:solenv ==? 'dark'
   set background=dark
endif
silent! colorscheme solarized

" Dispatch
" Inspect runner pane
nnoremap <F5> :update<CR>:Dispatch ./% <CR>
" Run last command executed by VimuxRunCommand
nnoremap <F6> :update<CR>:Dispatch<CR>
" Prompt for a command to run
nnoremap <F7> :update<CR>:FocusDispatch
" run make
let g:target = ''
nnoremap <F8> :let g:target = ''<left>
" run make
nnoremap <F9> :update<CR>:exe 'Make '.target<Cr>


if v:version >= 800
   " ale
   let g:airline#extensions#ale#enabled=0
   let g:ale_linters = {'fortran': ['gfortran']}
   let g:ale_enabled = 0
   "command to run ale
   nnoremap <leader>sc :update<CR>:ALEToggle<CR>
else
   " Syntastic
   let g:syntastic_always_populate_loc_list = 1
   let g:syntastic_auto_loc_list = 0 " Don't auto open/close location list
   let g:syntastic_check_on_open = 0 " Never run syntastic automatically
   let g:syntastic_check_on_wq = 0   " Never run syntastic automatically
   let g:syntastic_enable_signs=1
   let g:syntastic_quiet_messages = { 'regex': '\max'}
   let g:syntastic_vim_checkers = ['vint']
   if executable('ifort')
      let g:syntastic_fortran_compiler = 'ifort'
      let g:syntastic_fortran_compiler_options = '-no-save-temps
               \ -y -warn -nogen-interfaces'
   else
      let g:syntastic_fortran_compiler = 'gfortran'
      let g:syntastic_fortran_compiler_options = '-Wall -O0'
   endif
   let g:syntastic_mode_map={'mode' : 'passive'}
   "command to run syntastic
   nnoremap <leader>sc :update<CR>:SyntasticCheck<CR>
endif

" commentary
noremap <leader>cc :Commentary<CR>

" vim-bbye
" nnoremap <Leader>q :Bdelete<CR>

"voom
let g:voom_return_key = '<C-]>'

"taboo
set sessionoptions+=tabpages,globals
nnoremap <leader>, :TabooRename<Space>


" vimwiki stuff "
" Run multiple wikis "
let g:vimwiki_list = [
         \ {'path': '~/wiki/',
         \ 'auto_tags': 1,
         \ 'ext': '.md',
         \ 'syntax': 'markdown',
         \ 'nested_syntaxes':  {'python': 'python', 'c++': 'cpp'}},
         \ {'path': '~/labjournal/text/',
         \ 'auto_tags': 1,
         \ 'ext': '.md',
         \ 'syntax': 'markdown',
         \ 'nested_syntaxes':  {'python': 'python', 'c++': 'cpp'},
         \ 'custom_wiki2html': '~/labjournal/text/vimwiki_stuff/wiki2html.sh'}
         \]
let g:vimwiki_conceallevel = 1
let g:vimwiki_folding = 'expr'
let g:vimwiki_autowriteall = 0
let g:vimwiki_table_mappings = 0
" mapping to open labjournal
nnoremap <leader>wl :call vimwiki#base#goto_index(2)<CR>

if has('win32unix')
  function! s:linux_handler(url)
    call system('cygstart ' . shellescape(a:url).' &')
  endfunction
endif

"easy-align
" Start interactive EasyAlign in visual mode
xmap <leader>a <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object
nmap <leader>a <Plug>(EasyAlign)

"Undo
nnoremap <leader>u :UndotreeToggle<CR>
let g:undotree_ShortIndicators=1

"Own functions
if !has('compatible')
   set nrformats=hex,alpha
   function! Incr()
      let l:a = line('.') - line("'<")
      let l:c = virtcol("'<")
      if l:a > 0
         execute 'normal! '.l:c.'|'.l:a."\<C-a>"
      endif
      normal! `<
   endfunction
   vnoremap <C-a> :call Incr()<CR>
   function! GenerateCtags()
      let l:ctagdir = substitute(system('git rev-parse --git-dir 2> /dev/null || echo -n "."'), '[[:cntrl:]]', '', 'g')
      let l:ctagwdir = substitute(system('git rev-parse --show-toplevel 2> /dev/null || echo -n "."'), '[[:cntrl:]]', '', 'g')
      echom l:ctagwdir
      echom l:ctagdir
      execute '!ctags -R --tag-relative=yes -f"'.l:ctagdir.'/tags" '.l:ctagwdir
      e!
   endfunction
   command! MakeCtags :call GenerateCtags()
   command! DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis | wincmd p | diffthis

endif

" General Settings
set scrolloff=5                " keep 5 lines to border of window
set sidescrolloff=5            " keep 5 characters to border of window
set display+=lastline
set spelllang=en_us
set hidden
set formatoptions+=j           " Delete comment character when joining commented lines
setglobal tags=./tags;,tags
set path+=**                   " fuzzy search
set wildmode=longest:full,full
set wildmenu                   " Better command-line completion
set complete-=i                " do not scan inclued files
set showcmd                    " Show partial commands in the last line of the screen
set hlsearch                   " Highlight searches
set ignorecase                 " Use case insensitive search
set smartcase                  " When using capital letters do not use ignorecase
set incsearch                  " show realtime search results
set backspace=indent,eol,start " Allow backspacing over autoindent, line breaks and start of insert action
set history=1000               " keep long history
set tabpagemax=50              " allow for many tabs
set viminfo^=!                 " store all uppercase variables
if exists('+breakindent')
   set breakindent             " indent wrapped lines
endif
set nostartofline              " Stop certain movements from always going to the first character of a line.
set autoread

" Status Line
set laststatus=2                             " always show statusbar
set statusline=
set statusline+=\<%n\>\                      " buffer number
set statusline+=%f\                          " filename
set statusline+=%h%m%r%w                     " status flags
set statusline+=\[%{strlen(&ft)?&ft:'none'}] " file type
set statusline+=%=                           " right align remainder
set statusline+=%5(%l%),%-9(%c%V%)\          " line, character

" set the status line up to change the status line based on mode
if v:version >= 700
   highlight StatusLine ctermfg=6 ctermbg=0
   augroup statusHighlight
      autocmd!
      autocmd InsertEnter * highlight StatusLine ctermfg=3 ctermbg=0
      autocmd InsertLeave * highlight StatusLine ctermfg=6 ctermbg=0
   augroup END
endif

set confirm " Instead of failing a command because of unsaved changes, instead raise a dialogue asking if you wish to save changed files.
if exists('&belloff')
   set belloff=all
else
   set visualbell " Use visual bell instead of beeping when doing something wrong
   set t_vb= " And reset the terminal code for the visual bell. If visualbell is set, and this line is also included, vim will neither flash nor beep. If visualbell is unset, this does nothing.
endif
set shortmess=a " shorter messages
set cmdheight=2 " prevent press enter
set notimeout ttimeout ttimeoutlen=200 " Quickly time out on keycodes, but never time out on mappings
set wrap "wrap lines at breakat
let &showbreak = ' â–º' " show wrapping line
set nolist  " list disables linebreak

"show ExtraWhitespace as red
highlight ExtraWhitespace ctermbg=9
match ExtraWhitespace /\s\+$/
augroup extraWhitespaceHighlight
   autocmd!
   autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
   autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
   autocmd InsertLeave * match ExtraWhitespace /\s\+$/
   autocmd BufWinLeave * call clearmatches()
augroup END

" Indentation settings for using 3 spaces instead of tabs.
set shiftwidth=3
set softtabstop=3
set expandtab
set smarttab
"Show bad spelling as underlined
highlight clear SpellBad
highlight SpellBad cterm=underline
"use system clipboad
set clipboard^=unnamed,unnamedplus
" easy split
set splitbelow
set splitright
" show textwidth
set colorcolumn=+1

"mappings
set pastetoggle=<F4> " Use <F4> to toggle between 'paste' and 'nopaste'
" Map Y to act like D and C, i.e. to yank until EOL, rather than act as yy,
" which is the default
map Y y$
" make c-u and c-w undoable:
inoremap <c-u> <c-g>u<c-u>
inoremap <c-w> <c-g>u<c-w>
" turn of highlight until the next search
nnoremap <leader>nn :nohlsearch<CR>
" free s of mappings, to use alt-s as an alternative for <esc>
nnoremap s <nop>
" use to naviage buffers easily
nnoremap <leader>b :buffers<CR>:buffer<Space>
" use to naviage buffers in current dir
nnoremap <leader>cb :filter /^[^\/]*$/ buffers<CR>:buffer<Space>
" force myselft to learn not using the arrow keys!
noremap <Up>    :echo "Stop using arrow keys, stupid" <CR>
noremap <Down>  :echo "Stop using arrow keys, stupid" <CR>
noremap <Left>  :echo "Stop using arrow keys, stupid" <CR>
noremap <Right> :echo "Stop using arrow keys, stupid" <CR>
" custom copy'n'paste
vnoremap <leader>y :w! /tmp/$USER/.vim/vbuf<CR>
nnoremap <leader>y :.w! /tmp/$USER/.vim/vbuf<CR>
nnoremap <leader>p :r /tmp/$USER/.vim/vbuf<CR>
" navigate tabs
nnoremap <leader>h :tabprevious<CR>
nnoremap <leader>l :tabnext<CR>
nnoremap <leader>H :tabmove -1<CR>
nnoremap <leader>L :tabmove +1<CR>
" navigate buffers
nnoremap <leader>k :bprevious<CR>
nnoremap <leader>j :bnext<CR>
nnoremap <leader>o :buffer#<CR>
" change current dir of the window
nnoremap <leader>cd :lcd %:p:h<CR>:pwd<CR>
" unmap ex mode
nnoremap Q <nop>
" Quickly open/reload vim
nnoremap <leader>ev :vsplit $MYVIMRC<CR>
nnoremap <leader>sv :source $MYVIMRC<CR>

if has('terminal')
   " easy access to terminal
   nnoremap <leader>te :vertical terminal ++close<CR>
   " easy access to terminal in the location of the file
   nnoremap <leader>tc :vsplit<CR> :lcd %:p:h<CR> :terminal ++close ++curwin<CR>
   tnoremap <C-W>cd <C-C> pwd >\| /tmp/$USER/.vim/cwd<CR><C-W>:execute 'cd '.system('cat /tmp/$USER/.vim/cwd')<CR>
endif

"easy navigation of completion window
inoremap <expr> j ((pumvisible())?("\<C-n>"):("j"))
inoremap <expr> k ((pumvisible())?("\<C-p>"):("k"))

"to prevent errenous usage of C-p for esc
inoremap <C-p> <Esc>
nnoremap <C-p> <Esc>

"folding
" if !has('compatible')
"    set nofoldenable
"    set foldmethod=manual
"    set foldlevel=0
"    set foldnestmax=2
"    let g:fortran_fold=1
"    nnoremap <leader>fo :let &foldmethod=b:wantedfoldmethod<CR>
" endif
"
set foldmethod=syntax

" tex
let g:tex_flavor = 'latex'

" Initialize Directories
if exists('*mkdir')
   if !isdirectory('/tmp/'.$USER.'/.vim/')
      call mkdir('/tmp/'.$USER.'/.vim/', 'p')
   endif
else
   echo 'Warning: Unable to create tmp directory: /tmp/$USER/.vim'
   echo 'Try: mkdir -p '
endif

" use persistent undo
if has('persistent_undo')      "check if your vim version supports it
   if exists('*mkdir')
      if !isdirectory('/tmp/'.$USER.'/.vim/undo/')
         call mkdir('/tmp/'.$USER.'/.vim/undo/', 'p')
      endif
   else
      echo 'Warning: Unable to create tmp directory: /tmp/$USER/.vim/undo'
      echo 'Try: mkdir -p '
   endif
   set undodir=/tmp/$USER/.vim/undo/
   set undofile
endif
